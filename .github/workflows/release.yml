name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build and Release
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: [1.21.x]
        include:
          - os: ubuntu-latest
            output-name: sagemaker-monitor-linux
          - os: macos-latest
            output-name: sagemaker-monitor-darwin
          - os: windows-latest
            output-name: sagemaker-monitor-windows.exe

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod tidy

    - name: Install UPX (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y upx-ucl

    - name: Install UPX (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install upx

    - name: Install UPX (Windows)
      if: matrix.os == 'windows-latest'
      run: choco install upx

    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      env:
        CGO_ENABLED: 0
      shell: bash
      run: |
        VERSION=$(git describe --tags --always)
        COMMIT=$(git rev-parse HEAD)
        BUILD_DATE=$(date -u '+%Y-%m-%d')
        LDFLAGS="-s -w -X main.version=${VERSION} -X main.commit=${COMMIT} -X main.date=${BUILD_DATE}"
        GOOS=windows GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o ${{ matrix.output-name }}
        upx --best --lzma ${{ matrix.output-name }}

    - name: Build (Unix)
      if: matrix.os != 'windows-latest'
      env:
        CGO_ENABLED: 0
      run: |
        VERSION=$(git describe --tags --always)
        COMMIT=$(git rev-parse HEAD)
        BUILD_DATE=$(date -u '+%Y-%m-%d')
        LDFLAGS="-s -w -X main.version=${VERSION} -X main.commit=${COMMIT} -X main.date=${BUILD_DATE}"
        
        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          GOOS=darwin GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o ${{ matrix.output-name }}
        else
          GOOS=linux GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o ${{ matrix.output-name }}
        fi
        
        upx --best --lzma ${{ matrix.output-name }}

    - name: Create Release Configs Directory
      run: mkdir -p release/configs

    - name: Copy Pricing Config
      run: cp configs/pricing.yaml release/configs/

    - name: Package Artifact
      run: |
        mkdir -p release/bin
        cp ${{ matrix.output-name }} release/bin/
        cp README.md release/
        cp LICENSE release/

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.output-name }}
        path: release/

  create-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Artifacts
      uses: actions/download-artifact@v3

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          **/bin/sagemaker-monitor-linux
          **/bin/sagemaker-monitor-darwin
          **/bin/sagemaker-monitor-windows.exe
          **/configs/pricing.yaml
          **/README.md
          **/LICENSE
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
